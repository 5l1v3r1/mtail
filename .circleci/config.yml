---
# common-build names an anchor which contains all the reusable build
# instructions.
common-build: &common-build
  working_directory: /go/src/github.com/google/mtail
  executor: go
  steps:
    - checkout
    - go/load-cache:
        key: v1
    - run: make --debug install_deps
    - run: make --debug smoke
    - run: mkdir -p test-results
    - run: mkdir -p workspace
    - run: go get gotest.tools/gotestsum
    - run:
        name: Run tests and coverage with race detector
        command: gotestsum --junitfile test-results/test-output.xml -- -race -coverprofile=workspace/${CIRCLE_JOB}.coverprofile --covermode=atomic -tags=integration -v -timeout=20m  ./...
        no_output_timeout: 20m
    - go/save-cache:
        key: v1
    - persist_to_workspace:
        root: workspace
        paths:
          - "*.coverprofile"
    - store_test_results:
        path: test-results
    - store_artifacts:
        path: test-results

# Used for setting up the build matrix.
go_latest: &go_latest
  <<: *common-build
  executor: go_latest

# concurrency* names anchors which define the the concurrency level to run
# tests with.
concurrency_4: &concurrency_4
  environment:
    GOMAXPROCS: 4
concurrency_2: &concurrency_2
  environment:
    GOMAXPROCS: 2
concurrency_1: &concurrency_1
  environment:
    GOMAXPROCS: 1

# The main circle-ci configuration.
version: 2.1
orbs:
  go: circleci/go@0.2.0
executors:
  go_latest:
    docker:
      - image: circleci/golang:1.13
  fuzzit:
    docker:
      - image: gcr.io/fuzzit-public/buster-golang12:2dc7875
jobs:
  # The main build steps are the crossproduct of concurrency and go versions.
  build-go_latest-4:
    <<: [*go_latest, *concurrency_4]
  build-go_latest-2:
    <<: [*go_latest, *concurrency_2]
  build-go_latest-1:
    <<: [*go_latest, *concurrency_1]

  # Coverage collects all the coverage reports from each build and merges them,
  # before sending off to Coveralls.
  coverage:
    working_directory: /go/src/github.com/google/mtail
    environment:
      COVERALLS_TOKEN: AQTCw3bl6FDphbQcMMkgVZBIunz5r3H8b
    executor: go_latest
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - go/load-cache:
          key: v1
      - run: make --debug install_deps
      - run:
          name: Generate coverage
          command: |
            ls -lR /tmp/workspace
            go get github.com/sozorogami/gover
            gover /tmp/workspace coverprofile
            make upload_to_coveralls
      - store_artifacts:
          path: coverprofile
          destination: coverage

  container:
    working_directory: /go/src/github.com/google/mtail
    executor: go_latest
    steps:
      - checkout
      - go/load-cache:
          key: v1
      - setup_remote_docker
      - run: |
          make container

  delivery:
    working_directory: /go/src/github.com/google/mtail
    executor: go_latest
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - go/load-cache:
          key: v1
      - run: make --debug install_deps
      - run: make --debug crossbuild
      - run: sha1sum build/*
      - store_artifacts:
          path: build/
      - run:
          name: Upload binaries to GitHub Release
          # GITHUB_TOKEN is a secret from the CircleCI environment
          command: |
            go get github.com/tcnksm/ghr
            ghr -t $GITHUB_TOKEN -u $CIRCLE_PROJECT_USERNAME -r $CIRCLE_PROJECT_REPONAME --replace ${CIRCLE_TAG?} build/

  fuzzing:
    working_directory: /go/src/github.com/google/mtail
    executor: fuzzit
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - go/load-cache:
          key: v1
      - run: |
          wget -q -O fuzzit https://github.com/fuzzitdev/fuzzit/releases/latest/download/fuzzit_Linux_x86_64
          chmod a+x fuzzit
      - run: |
          make GO111MODULE=off --debug install_deps
          GO111MODULE=on go mod vendor
          make GO111MODULE=off CXX=clang CXXFLAGS=-fsanitize=fuzzer LIB_FUZZING_ENGINE= --debug ./vm-fuzzer
      - run: |
          ./fuzzit create job --type=fuzzing --branch=${CIRCLE_BRANCH} --revision=${CIRCLE_SHA1} mtail/internal-vm ./vm-fuzzer

  fuzz-regression:
    working_directory: /go/src/github.com/google/mtail
    executor: fuzzit
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: /tmp/workspace
      - go/load-cache:
          key: v1
      - run: |
          wget -q -O fuzzit https://github.com/fuzzitdev/fuzzit/releases/latest/download/fuzzit_Linux_x86_64
          chmod a+x fuzzit
      - run: |
          make GO111MODULE=off --debug install_deps
          GO111MODULE=on go mod vendor
          make GO111MODULE=off CXX=clang CXXFLAGS=-fsanitize=fuzzer LIB_FUZZING_ENGINE= --debug ./vm-fuzzer
      - run: |
          ./fuzzit create job --type=local-regression --branch=${CIRCLE_BRANCH} --revision=${CIRCLE_SHA1} mtail/internal-vm ./vm-fuzzer

# tag-filter ensures that jobs run for version-tagged changes as well as
# regular commits.  Use for all normal build and test and stats (coverage)
# jobs.
tag-filter: &tag-filter
  filters:
    tags:
      only: /^v.*/

# tag-and-branch-filter ensures that jobs run only for *only* version-tagged
# changes; excluding all branches to avoid triggering on all commits. Use for
# all release jobs.
tag-and-branch-filter: &tag-and-branch-filter
  filters:
    tags:
      only: /^v.*/
    # Explicitly disable all branches, otherwise we match on every
    # commit.
    branches:
      ignore: /.*/

# Using workflows to sequence each of our builds in parallel, and coverage
# depending on all of them.  These two lists need to be updated when the inputs
# of the build matrix change.
workflows:
  version: 2
  build_and_deliver:
    jobs:
      - build-go_latest-4:
          <<: *tag-filter
      - build-go_latest-2:
          <<: *tag-filter
          requires:
            - build-go_latest-4
      - build-go_latest-1:
          <<: *tag-filter
          requires:
            - build-go_latest-4
      - coverage:
          <<: *tag-filter
          requires:
            - build-go_latest-4
            - build-go_latest-2
            - build-go_latest-1
      - fuzz-regression:
          <<: *tag-filter
          requires:
            - build-go_latest-4
      - fuzzing:
          <<: *tag-filter
          filters:
            branches:
              # pull requests don't have access to the Fuzzit API key.
              ignore: /pull\/.*/
          requires:
            - build-go_latest-4
      - container:
          <<: *tag-and-branch-filter
          requires:
            - coverage
      - delivery:
          <<: *tag-and-branch-filter
          requires:
            - container
